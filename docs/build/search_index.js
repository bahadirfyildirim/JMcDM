var documenterSearchIndex = {"docs":
[{"location":"mcdms/#Multiple-Criteria-Decision-Making-Tools","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"","category":"section"},{"location":"mcdms/#TOPSIS","page":"Multiple Criteria Decision Making Tools","title":"TOPSIS","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.topsis","category":"page"},{"location":"mcdms/#JMcDM.topsis","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.topsis","text":"    topsis(decisionMat, weights, fns)\n\nApply TOPSIS (Technique for Order of Preference by Similarity to Ideal Solution) method  for a given matrix and weights.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n candidate (or strategy) and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of function that are either minimize or maximize.\n\nDescription\n\ntopsis() applies the TOPSIS method to rank n strategies subject to m criteria which are supposed to be either maximized or minimized.\n\nOutput\n\n::TopsisResult: TopsisResult object that holds multiple outputs including scores and best index.\n\nExamples\n\njulia> df = DataFrame();\njulia> df[:, :x] = Float64[9, 8, 7];\njulia> df[:, :y] = Float64[7, 7, 8];\njulia> df[:, :z] = Float64[6, 9, 6];\njulia> df[:, :q] = Float64[7, 6, 6];\n\njulia> w = Float64[4, 2, 6, 8];\n\njulia> df\n3×4 DataFrame\n Row │ x        y        z        q       \n     │ Float64  Float64  Float64  Float64 \n─────┼────────────────────────────────────\n   1 │     9.0      7.0      6.0      7.0\n   2 │     8.0      7.0      9.0      6.0\n   3 │     7.0      8.0      6.0      6.0\n\njulia> fns = makeminmax([maximum, maximum, maximum, maximum]);\njulia> result = topsis(df, w, fns);\n\njulia> result.bestIndex\n2\n\njulia> result.scores\n3-element Array{Float64,1}:\n 0.38768695492211824\n 0.6503238218850163\n 0.08347670030339041\n\nReferences\n\nHwang, C.L.; Yoon, K. (1981). Multiple Attribute Decision Making: Methods and Applications. New York: Springer-Verlag\n\nCelikbilek Yakup, Cok Kriterli Karar Verme Yontemleri, Aciklamali ve Karsilastirmali Saglik Bilimleri Uygulamalari ile. Editor: Muhlis Ozdemir, Nobel Kitabevi, Ankara, 2018\n\nİşletmeciler, Mühendisler ve Yöneticiler için Operasyonel, Yönetsel ve Stratejik Problemlerin Çözümünde Çok Kriterli Karar verme Yöntemleri, Editörler: Bahadır Fatih Yıldırım ve Emrah Önder, Dora, 2. Basım, 2015, ISBN: 978-605-9929-44-8\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#ELECTRE","page":"Multiple Criteria Decision Making Tools","title":"ELECTRE","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.electre","category":"page"},{"location":"mcdms/#JMcDM.electre","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.electre","text":"    electre(decisionMat, weights, fns)\n\nApply ELECTRE (ELimination Et Choice Translating REality) method  for a given matrix and weights.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n candidate (or strategy) and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of function that are either minimize or maximize.\n\nDescription\n\nelectre() applies the ELECTRE method to rank n strategies subject to m criteria which are supposed to be either maximized or minimized.\n\nOutput\n\n::ElectreResult: TopsisResult object that holds multiple outputs including scores and best index.\n\nExamples\n\njulia> w =  [0.110, 0.035, 0.379, 0.384, 0.002, 0.002, 0.010, 0.077];\njulia> Amat = [\n      100 92 10 2 80 70 95 80 ;\n      80  70 8  4 100 80 80 90 ;\n      90 85 5 0 75 95 70 70 ; \n      70 88 20 18 60 90 95 85\n    ];\n\njulia> dmat = makeDecisionMatrix(Amat);\njulia> fns = makeminmax([maximum for i in 1:8]);\njulia> result = electre(dmat, w, fns)\n\njulia> dmat\n4×8 DataFrame\n Row │ Crt1     Crt2     Crt3     Crt4     Crt5     Crt6     Crt7     Crt8    \n     │ Float64  Float64  Float64  Float64  Float64  Float64  Float64  Float64 \n─────┼────────────────────────────────────────────────────────────────────────\n   1 │   100.0     92.0     10.0      2.0     80.0     70.0     95.0     80.0\n   2 │    80.0     70.0      8.0      4.0    100.0     80.0     80.0     90.0\n   3 │    90.0     85.0      5.0      0.0     75.0     95.0     70.0     70.0\n   4 │    70.0     88.0     20.0     18.0     60.0     90.0     95.0     85.0\n\njulia> result.bestIndex\n(4,)\n\njulia> result.C\n4-element Array{Float64,1}:\n  0.3693693693693696\n  0.01501501501501501\n -2.473473473473473\n  2.0890890890890894\n\njulia> result.D\n4-element Array{Float64,1}:\n  0.1914244325928971\n -0.19039293350192432\n  2.884307608766315\n -2.885339107857288\n\nReferences\n\nCelikbilek Yakup, Cok Kriterli Karar Verme Yontemleri, Aciklamali ve Karsilastirmali Saglik Bilimleri Uygulamalari ile. Editor: Muhlis Ozdemir, Nobel Kitabevi, Ankara, 2018\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#DEMATEL","page":"Multiple Criteria Decision Making Tools","title":"DEMATEL","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.dematel","category":"page"},{"location":"mcdms/#JMcDM.dematel","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.dematel","text":"    dematel(comparisonMat; threshold = nothing)\n\nApply Dematel for a given comparison matrix.\n\nArguments:\n\ncomparisonMat::Array{Float,2}: n × m matrix of input values. \nthreshold::Union{Nothing, Float64}: Optional threshold used in calculating values of influence matrix. It is calculated when the argument is omitted. \n\nDescription\n\ndematel() applies the Dematel method to calculate criteria weights, possibly for use in another multi-criteria decision making tool.\n\nOutput\n\n::DematelResult: DematelResult object that holds many results including weights for each single criterion.\n\nExamples\n\njulia> K = [\n        0 3 0 2 0 0 0 0 3 0;\n        3 0 0 0 0 0 0 0 0 2;\n        4 1 0 2 1 3 1 2 3 2;\n        4 1 4 0 1 2 0 1 0 0;\n        3 2 3 1 0 3 0 2 0 0;\n        4 1 4 4 0 0 0 1 1 3;\n        3 0 0 0 0 2 0 0 0 0;\n        3 0 4 3 2 3 1 0 0 0;\n        4 3 2 0 0 1 0 0 0 2;\n        2 1 0 0 0 0 0 0 3 0\n    ];\n\njulia> dmat = makeDecisionMatrix(K);\njulia> result = dematel(dmat);\n\njulia> result.weights\n10-element Array{Float64,1}:\n 0.1686568559124561\n 0.07991375718719543\n 0.14006200243438863\n 0.10748052790517183\n 0.08789022388276985\n 0.12526272598854982\n 0.03067915023486491\n 0.10489168834828348\n 0.092654758940811\n 0.06250830916550884\n\nReferences\n\nCelikbilek Yakup, Cok Kriterli Karar Verme Yontemleri, Aciklamali ve Karsilastirmali Saglik Bilimleri Uygulamalari ile. Editor: Muhlis Ozdemir, Nobel Kitabevi, Ankara, 2018\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#MOORA","page":"Multiple Criteria Decision Making Tools","title":"MOORA","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.moora","category":"page"},{"location":"mcdms/#JMcDM.moora","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.moora","text":"    moora(decisionMat, weights, fns)\n\nApply MOORA (Multi-Objective Optimization By Ratio Analysis) method for a given matrix and weights.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n candidate (or strategy) and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of function that are either maximum or minimum.\n\nDescription\n\nmoora() applies the MOORA method to rank n strategies subject to m criteria which are supposed to be either maximized or minimized.\n\nOutput\n\n::MooraResult: MooraResult object that holds multiple outputs including scores and best index.\n\nExamples\n\njulia> w =  [0.110, 0.035, 0.379, 0.384, 0.002, 0.002, 0.010, 0.077];\n\njulia> Amat = [\n             100 92 10 2 80 70 95 80 ;\n             80  70 8  4 100 80 80 90 ;\n             90 85 5 0 75 95 70 70 ; \n             70 88 20 18 60 90 95 85\n           ];\n\njulia> dmat = makeDecisionMatrix(Amat)\n4×8 DataFrame\n Row │ Crt1     Crt2     Crt3     Crt4     Crt5     Crt6     Crt7     Crt8    \n     │ Float64  Float64  Float64  Float64  Float64  Float64  Float64  Float64 \n─────┼────────────────────────────────────────────────────────────────────────\n   1 │   100.0     92.0     10.0      2.0     80.0     70.0     95.0     80.0\n   2 │    80.0     70.0      8.0      4.0    100.0     80.0     80.0     90.0\n   3 │    90.0     85.0      5.0      0.0     75.0     95.0     70.0     70.0\n   4 │    70.0     88.0     20.0     18.0     60.0     90.0     95.0     85.0\n\njulia> fns = makeminmax([maximum, maximum, maximum, maximum, maximum, maximum, maximum, maximum]);\n\njulia> result = moora(dmat, w, fns)\n\njulia> result.scores\n4-element Array{Float64,1}:\n 0.3315938731541169\n 0.2901446390098523\n 0.3730431072983815\n 0.019265256092245782\n\njulia> result.bestIndex\n4\n\nReferences\n\nCelikbilek Yakup, Cok Kriterli Karar Verme Yontemleri, Aciklamali ve Karsilastirmali Saglik Bilimleri Uygulamalari ile. Editor: Muhlis Ozdemir, Nobel Kitabevi, Ankara, 2018\n\nİşletmeciler, Mühendisler ve Yöneticiler için Operasyonel, Yönetsel ve Stratejik Problemlerin Çözümünde Çok Kriterli Karar verme Yöntemleri, Editörler: Bahadır Fatih Yıldırım ve Emrah Önder, Dora, 2. Basım, 2015, ISBN: 978-605-9929-44-8\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#VIKOR","page":"Multiple Criteria Decision Making Tools","title":"VIKOR","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.vikor","category":"page"},{"location":"mcdms/#JMcDM.vikor","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.vikor","text":"    vikor(decisionMat, weights, fns; v = 0.5)\n\nApply VIKOR (VlseKriterijumska Optimizcija I Kaompromisno Resenje in Serbian) method for a given matrix and weights.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n candidate (or strategy) and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of function that are either maximum or minimum.\nv::Float64: Optional algorithm parameter. Default is 0.5.\n\nDescription\n\nvikor() applies the VIKOR method to rank n strategies subject to m criteria which are supposed to be either maximized or minimized.\n\nOutput\n\n::VikorResult: VikorResult object that holds multiple outputs including scores and best index.\n\nExamples\n\njulia> Amat = [\n             100 92 10 2 80 70 95 80 ;\n             80  70 8  4 100 80 80 90 ;\n             90 85 5 0 75 95 70 70 ; \n             70 88 20 18 60 90 95 85\n           ];\n\njulia> dmat = makeDecisionMatrix(Amat)\n4×8 DataFrame\n Row │ Crt1     Crt2     Crt3     Crt4     Crt5     Crt6     Crt7     Crt8    \n     │ Float64  Float64  Float64  Float64  Float64  Float64  Float64  Float64 \n─────┼────────────────────────────────────────────────────────────────────────\n   1 │   100.0     92.0     10.0      2.0     80.0     70.0     95.0     80.0\n   2 │    80.0     70.0      8.0      4.0    100.0     80.0     80.0     90.0\n   3 │    90.0     85.0      5.0      0.0     75.0     95.0     70.0     70.0\n   4 │    70.0     88.0     20.0     18.0     60.0     90.0     95.0     85.0\n\njulia> fns = makeminmax([maximum, maximum, maximum, maximum, maximum, maximum, maximum, maximum]);\n\njulia> result = vikor(dmat, w, fns);\n\njulia> result.scores\n4-element Array{Float64,1}:\n  0.1975012087551764\n  0.2194064473270817\n  0.3507643203516215\n -0.16727341435277993\n\njulia> result.bestIndex\n4\n\n\nReferences\n\nCelikbilek Yakup, Cok Kriterli Karar Verme Yontemleri, Aciklamali ve Karsilastirmali Saglik Bilimleri Uygulamalari ile. Editor: Muhlis Ozdemir, Nobel Kitabevi, Ankara, 2018\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#AHP","page":"Multiple Criteria Decision Making Tools","title":"AHP","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.ahp","category":"page"},{"location":"mcdms/#JMcDM.ahp","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.ahp","text":"AHP(comparisonMatrix, criteriaComparisonMatrix)\n\nApply AHP (Analytical Hierarchy Process) for a given comparison matrix and criteria comparison matrix.\n\nArguments:\n\ncomparisonMatrix::DataFrame: Comparison matrix for AHP (Comparison of rows). \ncriteriaComparisonMatrix::DataFrame: Criteria comparison matrix for AHP (Comparison of columns). \n\nDescription\n\nAHP is based on subjective comparison between criteria. The success of the method highly depends on  consistency of these comparison. The method test the consistency first. At the next step, weights are  calculated. The ordering of rows is determined by these weights.\n\nOutput\n\n::AHPResult: AhpResult object that holds multiple outputs including calculated weights and scores.\n\nExamples\n\njulia> K\n8×8 Array{Float64,2}:\n 1.0       7.0  0.2    0.125     0.5   0.333333  0.2       1.0\n 0.142857  1.0  0.125  0.111111  0.25  0.2       0.111111  0.125\n 5.0       8.0  1.0    0.333333  4.0   2.0       1.0       1.0\n 8.0       9.0  3.0    1.0       7.0   5.0       3.0       3.0\n 2.0       4.0  0.25   0.142857  1.0   0.5       0.2       0.2\n 3.0       5.0  0.5    0.2       2.0   1.0       0.333333  0.333333\n 5.0       9.0  1.0    0.333333  5.0   3.0       1.0       1.0\n 1.0       8.0  1.0    0.333333  5.0   3.0       1.0       1.0\n\njulia> A1\n4×4 Array{Float64,2}:\n 1.0       3.0  0.2       2.0\n 0.333333  1.0  0.142857  0.333333\n 5.0       7.0  1.0       4.0\n 0.5       3.0  0.25      1.0\n\njulia> A2\n4×4 Array{Float64,2}:\n 1.0   0.5       4.0       5.0\n 2.0   1.0       6.0       7.0\n 0.25  0.166667  1.0       3.0\n 0.2   0.142857  0.333333  1.0\n\njulia> A3\n4×4 Array{Float64,2}:\n 1.0       0.5  0.166667  3.0\n 2.0       1.0  0.25      5.0\n 6.0       4.0  1.0       9.0\n 0.333333  0.2  0.111111  1.0\n\njulia> A4\n4×4 Array{Float64,2}:\n 1.0       7.0  0.25      2.0\n 0.142857  1.0  0.111111  0.2\n 4.0       9.0  1.0       5.0\n 0.5       5.0  0.2       1.0\n\njulia> A5\n4×4 Array{Float64,2}:\n 1.0       6.0  2.0   3.0\n 0.166667  1.0  0.25  0.333333\n 0.5       4.0  1.0   2.0\n 0.333333  3.0  0.5   1.0\n\njulia> A6\n4×4 Array{Float64,2}:\n 1.0  0.25  0.5  0.142857\n 4.0  1.0   2.0  0.333333\n 2.0  0.5   1.0  0.2\n 7.0  3.0   5.0  1.0\n\njulia> A7\n4×4 Array{Float64,2}:\n 1.0       3.0   7.0  1.0\n 0.333333  1.0   4.0  0.333333\n 0.142857  0.25  1.0  0.142857\n 1.0       3.0   7.0  1.0\n\njulia> A8\n4×4 Array{Float64,2}:\n 1.0    2.0       5.0       8.0\n 0.5    1.0       3.0       6.0\n 0.2    0.333333  1.0       3.0\n 0.125  0.166667  0.333333  1.0\n\njulia> km = makeDecisionMatrix(K);\njulia> as = map(makeDecisionMatrix, [A1, A2, A3, A4, A5, A6, A7, A8]);\njulia> result = ahp(as, km);\njulia> result.bestIndex\n3\njulia> result.scores\n4-element Array{Float64,1}:\n 0.2801050163111839\n 0.14822726478768022\n 0.3813036392434616\n 0.19036407965767424\n\nReferences\n\nSaaty, Thomas L. \"Decision making with the analytic hierarchy process.\" International journal of services sciences 1.1 (2008): 83-98.\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#Data-Envelopment-Analysis","page":"Multiple Criteria Decision Making Tools","title":"Data Envelopment Analysis","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.dataenvelop","category":"page"},{"location":"mcdms/#JMcDM.dataenvelop","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.dataenvelop","text":"    dataenvelop(input, output; verbose = false)\n\nApply data envelop analysis for a given input matrix and an output vector.\n\nArguments:\n\ninput::Array{Float,2}: n × m matrix of input values. \noutput::Array{Float64, 1}: n-vector of output values.\nverbose::Bool: Logical value indicating whether to show optimizition logs. Default is false.\n\nDescription\n\ndataenvloper() applies the data envelop analysis to calculate efficiencies of cases.\n\nOutput\n\n::DataEnvelopResult: DataEnvelopResult object that holds many results including efficiencies and rankings.\n\nExamples\n\njulia> x1 = [96.0, 84, 90, 81, 102, 83, 108, 99, 95];\njulia> x2 = [300.0, 282, 273, 270, 309, 285, 294, 288, 306];\njulia> out = [166.0, 150, 140, 136, 171, 144, 172, 170, 165];\njulia> inp = hcat(x1, x2);\njulia> result = dataenvelop(inp, out);\njulia> result.orderedcases\n9-element Array{Symbol,1}:\n :Case8\n :Case2\n :Case7\n :Case1\n :Case9\n :Case6\n :Case5\n :Case4\n :Case3\n\njulia> result.efficiencies\n9-element Array{Float64,1}:\n 0.9879815986198964\n 0.9999999999999999\n 0.8959653733189055\n 0.9421686746987951\n 0.9659435120753173\n 0.9715662650602411\n 0.9911164465786314\n 1.0\n 0.9841048789857857\n\nReferences\n\nİşletmeciler, Mühendisler ve Yöneticiler için Operasyonel, Yönetsel ve Stratejik Problemlerin Çözümünde Çok Kriterli Karar verme Yöntemleri, Editörler: Bahadır Fatih Yıldırım ve Emrah Önder, Dora, 2. Basım, 2015, ISBN: 978-605-9929-44-8\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#Grey-Relational-Analysis","page":"Multiple Criteria Decision Making Tools","title":"Grey Relational Analysis","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.grey","category":"page"},{"location":"mcdms/#JMcDM.grey","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.grey","text":"    grey(decisionMat, weights, fs, zeta)\n\nPerform GRA (Grey Relational Analysis) for a given decision matrix and weights.\n\nArguments:\n\ndecisionMat::Array{Float,2}: n × m matrix of decision matrix. \nweights::Array{Float64, 1}: m-vector of weights for criteria.\nfs::Array{Function, 1}: m-vector of functions that are either maximize or minimize for each single criterion.\nzeta::Float64: zeta parameter for the algorithm. The default is 0.5.\n\nDescription\n\nApplies GRA (Grey Relational Analysis).\n\nOutput\n\n::GameResult: GreyResult object that holds many values including ordering of strategies or candidates and best index.\n\nExamples\n\njulia> # Decision matrix of 5 candidates and 6 criteria.\njulia> df = DataFrame(\n               :K1 => [105000.0, 120000, 150000, 115000, 135000],\n               :K2 => [105.0, 110, 120, 105, 115],\n               :K3 => [10.0, 15, 12, 20, 15],\n               :K4 => [4.0, 4, 3, 4, 5],\n               :K5 => [300.0, 500, 550, 600, 400],\n               :K6 => [10.0, 8, 12, 9, 9]\n        )\n5×6 DataFrame\n Row │ K1        K2       K3       K4       K5       K6      \n     │ Float64   Float64  Float64  Float64  Float64  Float64 \n─────┼───────────────────────────────────────────────────────\n   1 │ 105000.0    105.0     10.0      4.0    300.0     10.0\n   2 │ 120000.0    110.0     15.0      4.0    500.0      8.0\n   3 │ 150000.0    120.0     12.0      3.0    550.0     12.0\n   4 │ 115000.0    105.0     20.0      4.0    600.0      9.0\n   5 │ 135000.0    115.0     15.0      5.0    400.0      9.0\n\njulia> # Direction of optimization for each single criterion\njulia> functionlist = [minimum, maximum, minimum, maximum, maximum, minimum];\n\njulia> # Weights\njulia> w = [0.05, 0.20, 0.10, 0.15, 0.10, 0.40];\n\njulia> result = grey(df, w, functionlist);\n\njulia> result.scores\n5-element Array{Float64,1}:\n 0.525\n 0.7007142857142857\n 0.5464285714285715\n 0.5762820512820512\n 0.650952380952381\n\njulia> result.bestIndex\n2\n\nReferences\n\nİşletmeciler, Mühendisler ve Yöneticiler için Operasyonel, Yönetsel ve Stratejik Problemlerin Çözümünde Çok Kriterli Karar verme Yöntemleri, Editörler: Bahadır Fatih Yıldırım ve Emrah Önder, Dora, 2. Basım, 2015, ISBN: 978-605-9929-44-8\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#Non-dominated-Sorting","page":"Multiple Criteria Decision Making Tools","title":"Non-dominated Sorting","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.nds","category":"page"},{"location":"mcdms/#JMcDM.nds","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.nds","text":"nds(data)\n\nSort multidimensional data using non-dominated sorting algorithm.\n\nArguments\n\ndata::DataFrame: n x k desicion matrix with n cases and k critera.\n\nOutput\n\n::NDSResult: NDSResult object that holds multiple outputs including ranks and best index.\n\nExamples\n\n julia> cases = [\n               1.0 2.0 3.0;\n               2.0 1.0 3.0;\n               1.0 3.0 2.0;\n               4.0 5.0 6.0\n           ];\n\njulia> nd = makeDecisionMatrix(cases)\n4×3 DataFrame\n Row │ Crt1     Crt2     Crt3    \n     │ Float64  Float64  Float64 \n─────┼───────────────────────────\n   1 │     1.0      2.0      3.0\n   2 │     2.0      1.0      3.0\n   3 │     1.0      3.0      2.0\n   4 │     4.0      5.0      6.0\n\njulia> result = nds(nd);\n\njulia> result.ranks\n4-element Array{Int64,1}:\n 0\n 0\n 0\n 3\n\njulia> result.bestIndex\n4 \n\nReferences\n\nDeb, Kalyanmoy, et al. \"A fast elitist non-dominated sorting genetic algorithm for multi-objective optimization: NSGA-II.\"  International conference on parallel problem solving from nature. Springer, Berlin, Heidelberg, 2000.\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#SAW","page":"Multiple Criteria Decision Making Tools","title":"SAW","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.saw","category":"page"},{"location":"mcdms/#JMcDM.saw","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.saw","text":"    saw(decisionMat, weights, fns)\n\nApply SAW (Simple Additive Weighting) method for a given matrix and weights. This method also known as WSM (Weighted Sum Model)\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n candidate (or strategy) and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of functions to be applied on the columns. \n\nDescription\n\nsaw() applies the SAW method to rank n strategies subject to m criteria which are supposed to be  either maximized or minimized.\n\nOutput\n\n::SawResult: SawResult object that holds multiple outputs including scores, rankings, and best index.\n\nExamples\n\njulia> decmat = [4.0  7  3  2  2  2  2;\n                 4.0  4  6  4  4  3  7;\n                 7.0  6  4  2  5  5  3;\n                 3.0  2  5  3  3  2  5;\n                 4.0  2  2  5  5  3  6];\njulia> df = makeDecisionMatrix(decmat)\n5×7 DataFrame\n Row │ Crt1     Crt2     Crt3     Crt4     Crt5     Crt6     Crt7    \n     │ Float64  Float64  Float64  Float64  Float64  Float64  Float64 \n─────┼───────────────────────────────────────────────────────────────\n   1 │     4.0      7.0      3.0      2.0      2.0      2.0      2.0\n   2 │     4.0      4.0      6.0      4.0      4.0      3.0      7.0\n   3 │     7.0      6.0      4.0      2.0      5.0      5.0      3.0\n   4 │     3.0      2.0      5.0      3.0      3.0      2.0      5.0\n   5 │     4.0      2.0      2.0      5.0      5.0      3.0      6.0\n\njulia> fns = convert(Array{Function,1}, [maximum for i in 1:7])\n7-element Array{Function,1}:\n maximum (generic function with 16 methods)\n maximum (generic function with 16 methods)\n maximum (generic function with 16 methods)\n maximum (generic function with 16 methods)\n maximum (generic function with 16 methods)\n maximum (generic function with 16 methods)\n maximum (generic function with 16 methods)\n\njulia> weights = [0.283, 0.162, 0.162, 0.07, 0.085, 0.162, 0.076];\n\njulia> result = saw(df, weights, fns);\n\njulia> result.scores\n5-element Array{Float64,1}:\n 0.5532285714285714\n 0.7134857142857142\n 0.8374285714285714\n 0.5146571428571429\n 0.5793428571428572\n\njulia> result.bestIndex\n3\n\nReferences\n\nAfshari, Alireza, Majid Mojahed, and Rosnah Mohd Yusuff. \"Simple additive weighting approach to  personnel selection problem.\" International Journal of Innovation, Management and Technology  1.5 (2010): 511.\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#ARAS","page":"Multiple Criteria Decision Making Tools","title":"ARAS","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.aras","category":"page"},{"location":"mcdms/#JMcDM.aras","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.aras","text":"aras(decisionMat, weights, fs)\n\nApply ARAS (Additive Ratio ASsessment) method for a given matrix, weights and, type of criteria.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n alternatives and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfs::Array{Function,1}: m-vector of type of criteria. The benefit criteria shown with \"maximum\", and the cost criteria shown with \"minimum\".\n\nDescription\n\naras() applies the ARAS method to rank n alternatives subject to m criteria and criteria type vector.\n\nOutput\n\n::ARASResult: ARASResult object that holds multiple outputs including scores and best index.\n\nExamples\n\njulia> df = DataFrame(\n    :K1 => [105000.0, 120000, 150000, 115000, 135000],\n    :K2 => [105.0, 110, 120, 105, 115],\n    :K3 => [10.0, 15, 12, 20, 15],\n    :K4 => [4.0, 4, 3, 4, 5],\n    :K5 => [300.0, 500, 550, 600, 400],\n    :K6 => [10.0, 8, 12, 9, 9]\n)\njulia> df\n5×6 DataFrame\n Row │ K1        K2       K3       K4       K5       K6      \n     │ Float64   Float64  Float64  Float64  Float64  Float64 \n─────┼───────────────────────────────────────────────────────\n   1 │ 105000.0    105.0     10.0      4.0    300.0     10.0\n   2 │ 120000.0    110.0     15.0      4.0    500.0      8.0\n   3 │ 150000.0    120.0     12.0      3.0    550.0     12.0\n   4 │ 115000.0    105.0     20.0      4.0    600.0      9.0\n   5 │ 135000.0    115.0     15.0      5.0    400.0      9.0\njulia> result = aras(df, w, fs);\njulia> result.bestIndex\n2\njulia> result.scores\n5-element Array{Float64,1}:\n 0.8142406768388222\n 0.8928861957614441\n 0.764157900073527\n 0.8422546181927358\n 0.8654063509472654\n\nReferences\n\nZavadskas, E. K., & Turskis, Z. (2010). A new additive ratio assessment (ARAS) method in multicriteria decision‐making. Technological and Economic Development of Economy, 16(2), 159-172. Yıldırım, B. F. (2015). \"Çok Kriterli Karar Verme Problemlerinde ARAS Yöntemi\". Kafkas Üniversitesi İktisadi ve İdari Bilimler Fakültesi Dergisi, 6 (9), 285-296. http://dx.doi.org/10.18025/kauiibf.65151\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#WPM","page":"Multiple Criteria Decision Making Tools","title":"WPM","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.wpm","category":"page"},{"location":"mcdms/#JMcDM.wpm","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.wpm","text":"    wpm(decisionMat, weights, fns)\n\nApply WPM (Weighted Product Method) for a given matrix and weights.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n alterntives and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of functions to be applied on the columns. \n\nDescription\n\nwpm() applies the WPM method to rank n alterntives subject to m criteria which are supposed to be  either maximized or minimized.\n\nOutput\n\n::WPMResult: WPMResult object that holds multiple outputs including scores, rankings, and best index.\n\nExamples\n\njulia> decmat = [3        12.5        2        120        14        3;\n       5        15        3        110        38        4;\n       3        13        2        120        19        3;\n       4        14        2        100        31        4;\n       3        15        1.5        125        40        4]\n5×6 Array{Float64,2}:\n 3.0  12.5  2.0  120.0  14.0  3.0\n 5.0  15.0  3.0  110.0  38.0  4.0\n 3.0  13.0  2.0  120.0  19.0  3.0\n 4.0  14.0  2.0  100.0  31.0  4.0\n 3.0  15.0  1.5  125.0  40.0  4.0\n\njulia> df = makeDecisionMatrix(decmat)\n5×6 DataFrame\n Row │ Crt1     Crt2     Crt3     Crt4     Crt5     Crt6    \n     │ Float64  Float64  Float64  Float64  Float64  Float64 \n─────┼──────────────────────────────────────────────────────\n   1 │     3.0     12.5      2.0    120.0     14.0      3.0\n   2 │     5.0     15.0      3.0    110.0     38.0      4.0\n   3 │     3.0     13.0      2.0    120.0     19.0      3.0\n   4 │     4.0     14.0      2.0    100.0     31.0      4.0\n   5 │     3.0     15.0      1.5    125.0     40.0      4.0\n\njulia> weights = [0.221, 0.159, 0.175, 0.127, 0.117, 0.201];\n\njulia> fns = [maximum, minimum, minimum, maximum, minimum, maximum];\n\njulia> result = wpm(df, weights, fns);\n\njulia> result.scores\n5-element Array{Float64,1}:\n 0.7975224331331252\n 0.7532541470584717\n 0.7647463553356331\n 0.7873956894790834\n 0.7674278741781709\n\njulia> result.bestIndex\n1\n\nReferences\n\nZavadskas, E. K., Turskis, Z., Antucheviciene, J., & Zakarevicius, A. (2012). Optimization of Weighted Aggregated Sum Product Assessment. Elektronika Ir Elektrotechnika, 122(6), 3-6. https://doi.org/10.5755/j01.eee.122.6.1810\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#WASPAS","page":"Multiple Criteria Decision Making Tools","title":"WASPAS","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.waspas","category":"page"},{"location":"mcdms/#JMcDM.waspas","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.waspas","text":"    waspas(decisionMat, weights, fns, lambda)\n\nApply WASPAS (Weighted Aggregated Sum Product ASsessment ) for a given matrix and weights.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n alterntives and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of functions to be applied on the columns.\nlambda::Float64: joint criterion. 0<=lambda<=1, default=0.5.\n\nDescription\n\nwaspas() applies the WASPAS method to rank n alterntives subject to m criteria which are supposed to be  either maximized or minimized.\n\nOutput\n\n::WASPASResult: WASPASResult object that holds multiple outputs including scores, rankings, and best index.\n\nExamples\n\njulia> decmat = [3        12.5        2        120        14        3;\n       5        15        3        110        38        4;\n       3        13        2        120        19        3;\n       4        14        2        100        31        4;\n       3        15        1.5        125        40        4]\n5×6 Array{Float64,2}:\n 3.0  12.5  2.0  120.0  14.0  3.0\n 5.0  15.0  3.0  110.0  38.0  4.0\n 3.0  13.0  2.0  120.0  19.0  3.0\n 4.0  14.0  2.0  100.0  31.0  4.0\n 3.0  15.0  1.5  125.0  40.0  4.0\n\njulia> df = makeDecisionMatrix(decmat)\n5×6 DataFrame\n Row │ Crt1     Crt2     Crt3     Crt4     Crt5     Crt6    \n     │ Float64  Float64  Float64  Float64  Float64  Float64 \n─────┼──────────────────────────────────────────────────────\n   1 │     3.0     12.5      2.0    120.0     14.0      3.0\n   2 │     5.0     15.0      3.0    110.0     38.0      4.0\n   3 │     3.0     13.0      2.0    120.0     19.0      3.0\n   4 │     4.0     14.0      2.0    100.0     31.0      4.0\n   5 │     3.0     15.0      1.5    125.0     40.0      4.0\n\njulia> weights = [0.221, 0.159, 0.175, 0.127, 0.117, 0.201];\n\njulia> fns = [maximum, minimum, minimum, maximum, minimum, maximum];\n\njulia> lambda = 0.5;\n\njulia> result = wpm(df, weights, fns, lambda);\n\njulia> result.scores\n5-element Array{Float64,1}:\n 0.8050212165665626\n 0.7750597051081832\n 0.770180748518019\n 0.7964243424353943\n 0.7882389370890854\n\n julia> result.bestIndex\n 1\n\nReferences\n\nZavadskas, E. K., Turskis, Z., Antucheviciene, J., & Zakarevicius, A. (2012). Optimization of Weighted Aggregated Sum Product Assessment. Elektronika Ir Elektrotechnika, 122(6), 3-6. https://doi.org/10.5755/j01.eee.122.6.1810 Aytaç Adalı, E. & Tuş Işık, A.. (2017). Bir Tedarikçi Seçim Problemi İçin SWARA ve WASPAS Yöntemlerine Dayanan Karar Verme Yaklaşımı. International Review of Economics and Management, 5 (4) , 56-77. DOI: 10.18825/iremjournal.335408\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#EDAS","page":"Multiple Criteria Decision Making Tools","title":"EDAS","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.edas","category":"page"},{"location":"mcdms/#JMcDM.edas","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.edas","text":"    edas(decisionMat, weights, fns)\n\nApply EDAS (Evaluation based on Distance from Average Solution) for a given matrix and weights.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n alterntives and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of functions to be applied on the columns. \n\nDescription\n\nedas() applies the EDAS method to rank n alterntives subject to m criteria which are supposed to be  either maximized or minimized.\n\nOutput\n\n::EDASResult: EDASResult object that holds multiple outputs including scores, rankings, and best index.\n\nExamples\n\njulia> decmat = [5000 5 5300 450;\n       4500 5 5000 400;\n       4500 4 4700 400;\n       4000 4 4200 400;\n       5000 4 7100 500;\n       5000 5 5400 450;\n       5500 5 6200 500;\n       5000 4 5800 450]\n8×4 Array{Int64,2}:\n 5000  5  5300  450\n 4500  5  5000  400\n 4500  4  4700  400\n 4000  4  4200  400\n 5000  4  7100  500\n 5000  5  5400  450\n 5500  5  6200  500\n 5000  4  5800  450\n\njulia> df = makeDecisionMatrix(decmat)\n8×4 DataFrame\n Row │ Crt1     Crt2     Crt3     Crt4    \n     │ Float64  Float64  Float64  Float64 \n─────┼────────────────────────────────────\n   1 │  5000.0      5.0   5300.0    450.0\n   2 │  4500.0      5.0   5000.0    400.0\n   3 │  4500.0      4.0   4700.0    400.0\n   4 │  4000.0      4.0   4200.0    400.0\n   5 │  5000.0      4.0   7100.0    500.0\n   6 │  5000.0      5.0   5400.0    450.0\n   7 │  5500.0      5.0   6200.0    500.0\n   8 │  5000.0      4.0   5800.0    450.0\n\njulia> weights = [0.25, 0.25, 0.25, 0.25];\n\njulia> fns = [maximum, maximum, minimum, minimum];\n\njulia> result = edas(df, weights, fns);\n\njulia> result.scores\n8-element Array{Float64,1}:\n 0.7595941163602383\n 0.8860162461306114\n 0.6974721951442592\n 0.739657763190231\n 0.05908329207449442\n 0.7318326305342363\n 0.6416913873322523\n 0.38519414045559647\n\njulia> result.bestIndex\n2\n\nReferences\n\nKeshavarz Ghorabaee, M., Zavadskas, E. K., Olfat, L., & Turskis, Z. (2015). Multi-criteria inventory classification using a new method of evaluation based on distance from average solution (EDAS). Informatica, 26(3), 435-451.\n\nUlutaş, A. (2017). EDAS Yöntemi Kullanılarak Bir Tekstil Atölyesi İçin Dikiş Makinesi Seçimi. İşletme Araştırmaları Dergisi, 9(2), 169-183.\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#MARCOS","page":"Multiple Criteria Decision Making Tools","title":"MARCOS","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.marcos","category":"page"},{"location":"mcdms/#JMcDM.marcos","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.marcos","text":"    marcos(decisionMat, weights, fns)\n\nApply MARCOS (Measurement Alternatives and Ranking according to COmpromise Solution) for a given matrix and weights.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n alterntives and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of functions to be applied on the columns. \n\nDescription\n\nmarcos() applies the MARCOS method to rank n alterntives subject to m criteria which are supposed to be  either maximized or minimized.\n\nOutput\n\n::MARCOSResult: MARCOSResult object that holds multiple outputs including scores, rankings, and best index.\n\nExamples\n\njulia> decmat = [8.675 8.433 8.000 7.800 8.025 8.043;\n       8.825 8.600 7.420 7.463 7.825 8.229;\n       8.325 7.600 8.040 7.700 7.925 7.600;\n       8.525 8.667 7.180 7.375 7.750 8.071]\n4×6 Array{Float64,2}:\n 8.675  8.433  8.0   7.8    8.025  8.043\n 8.825  8.6    7.42  7.463  7.825  8.229\n 8.325  7.6    8.04  7.7    7.925  7.6\n 8.525  8.667  7.18  7.375  7.75   8.071\n\njulia> df = makeDecisionMatrix(decmat)\n\n4×6 DataFrame\n Row │ Crt1     Crt2     Crt3     Crt4     Crt5     Crt6    \n     │ Float64  Float64  Float64  Float64  Float64  Float64 \n─────┼──────────────────────────────────────────────────────\n   1 │   8.675    8.433     8.0     7.8      8.025    8.043\n   2 │   8.825    8.6       7.42    7.463    7.825    8.229\n   3 │   8.325    7.6       8.04    7.7      7.925    7.6\n   4 │   8.525    8.667     7.18    7.375    7.75     8.071\n\njulia> weights = [0.1901901901901902 , 0.15915915915915918 , 0.19819819819819823, 0.1901901901901902, 0.15115115115115116, 0.11111111111111112];\n\njulia> fns = [maximum, maximum, maximum, maximum, maximum, maximum];\n\njulia> Fns = convert(Array{Function, 1} , fns)\n\njulia> result = marcos(df, weights, Fns);\n\njulia> result.scores\n4-element Array{Float64,1}:\n 0.6848657890705123\n 0.6727670074308345\n 0.6625969531206817\n 0.6611030275027843\n\njulia> result.bestIndex\n1\n\nReferences\n\nStević, Z., Pamučar, D., Puška, A., Chatterjee, P., Sustainable supplier selection in healthcare industries using a new MCDM method: Measurement Alternatives and Ranking according to COmpromise Solution (MARCOS), Computers & Industrial Engineering (2019), doi: https://doi.org/10.1016/j.cie.2019.106231\n\nPuška, A., Stojanović, I., Maksimović, A., & Osmanović, N. (2020). Evaluation software of project management used measurement of alternatives and ranking according to compromise solution (MARCOS) method. Operational Research in Engineering Sciences: Theory and Applications, 3(1), 89-102.\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#MABAC","page":"Multiple Criteria Decision Making Tools","title":"MABAC","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.mabac","category":"page"},{"location":"mcdms/#JMcDM.mabac","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.mabac","text":"    mabac(decisionMat, weights, fns)\n\nApply MABAC (Multi-Attributive Border Approximation area Comparison) for a given matrix and weights.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n alternatives and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of functions to be applied on the columns. \n\nDescription\n\nmabac() applies the MABAC method to rank n alternatives subject to m criteria which are supposed to be  either maximized or minimized.\n\nOutput\n\n::MABACResult: MABACResult object that holds multiple outputs including scores, rankings, and best index.\n\nExamples\n\njulia> decmat = [2 1 4 7 6 6 7 3000;\n       4 1 5 6 7 7 6 3500;\n       3 2 6 6 5 6 8 4000;\n       5 1 5 7 6 7 7 3000;\n       4 2 5 6 7 7 6 3000;\n       3 2 6 6 6 6 6 3500]\n6×8 \nArray{Int64,2}:\n 2  1  4  7  6  6  7  3000\n 4  1  5  6  7  7  6  3500\n 3  2  6  6  5  6  8  4000\n 5  1  5  7  6  7  7  3000\n 4  2  5  6  7  7  6  3000\n 3  2  6  6  6  6  6  3500\n\njulia> df = makeDecisionMatrix(decmat)\n6×8 DataFrame\n Row │ Crt1     Crt2     Crt3     Crt4     Crt5     Crt6     Crt7     Crt8    \n     │ Float64  Float64  Float64  Float64  Float64  Float64  Float64  Float64 \n─────┼────────────────────────────────────────────────────────────────────────\n   1 │     2.0      1.0      4.0      7.0      6.0      6.0      7.0   3000.0\n   2 │     4.0      1.0      5.0      6.0      7.0      7.0      6.0   3500.0\n   3 │     3.0      2.0      6.0      6.0      5.0      6.0      8.0   4000.0\n   4 │     5.0      1.0      5.0      7.0      6.0      7.0      7.0   3000.0\n   5 │     4.0      2.0      5.0      6.0      7.0      7.0      6.0   3000.0\n   6 │     3.0      2.0      6.0      6.0      6.0      6.0      6.0   3500.0\n\njulia> weights = [0.293, 0.427, 0.067, 0.027, 0.053, 0.027, 0.053, 0.053];\n\njulia> fns = [maximum, maximum, maximum, maximum, maximum, maximum, maximum, minimum];\n\njulia> result = mabac(df, weights, fns);\n\njulia> result.scores\n6-element Array{Float64,1}:\n -0.3113160790692055\n -0.10898274573587217\n  0.2003505875974611\n  0.0421839209307945\n  0.3445172542641278\n  0.2003505875974611\n\njulia> result.bestIndex\n5\n\nReferences\n\nPamučar, D., & Ćirović, G. (2015). The selection of transport and handling resources in logistics centers using Multi-Attributive Border Approximation area Comparison (MABAC). Expert Systems with Applications, 42(6), 3016–3028. doi:10.1016/j.eswa.2014.11.057\n\nUlutaş, A. (2019). Entropi ve MABAC yöntemleri ile personel seçimi. OPUS–International Journal of Society Researches, 13(19), 1552-1573. DOI: 10.26466/opus.580456\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#MAIRCA","page":"Multiple Criteria Decision Making Tools","title":"MAIRCA","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.mairca","category":"page"},{"location":"mcdms/#JMcDM.mairca","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.mairca","text":"    mairca(decisionMat, weights, fns)\n\nApply MAIRCA (Multi Attributive Ideal-Real Comparative Analysis) for a given matrix and weights.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n alternatives and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of functions to be applied on the columns. \n\nDescription\n\nmairca() applies the MAIRCA method to rank n alternatives subject to m criteria which are supposed to be  either maximized or minimized.\n\nOutput\n\n::MAIRCAResult: MAIRCAResult object that holds multiple outputs including scores, rankings, and best index.\n\nExamples\n\njulia> decmat = [6.952 8.000 6.649 7.268 8.000 7.652 6.316;\n       7.319 7.319 6.604 7.319 8.000 7.652 5.313;\n       7.000 7.319 7.652 6.952 7.652 6.952 4.642;\n       7.319 6.952 6.649 7.319 7.652 6.649 5.000]\n4×7 Array{Float64,2}:\n 6.952  8.0    6.649  7.268  8.0    7.652  6.316\n 7.319  7.319  6.604  7.319  8.0    7.652  5.313\n 7.0    7.319  7.652  6.952  7.652  6.952  4.642\n 7.319  6.952  6.649  7.319  7.652  6.649  5.0\n\n julia> df = makeDecisionMatrix(decmat)\n 4×7 DataFrame\n  Row │ Crt1     Crt2     Crt3     Crt4     Crt5     Crt6     Crt7    \n      │ Float64  Float64  Float64  Float64  Float64  Float64  Float64 \n ─────┼───────────────────────────────────────────────────────────────\n    1 │   6.952    8.0      6.649    7.268    8.0      7.652    6.316\n    2 │   7.319    7.319    6.604    7.319    8.0      7.652    5.313\n    3 │   7.0      7.319    7.652    6.952    7.652    6.952    4.642\n    4 │   7.319    6.952    6.649    7.319    7.652    6.649    5.0\n\njulia> weights = [0.172, 0.165, 0.159, 0.129, 0.112, 0.122, 0.140];\n\njulia> fns = [maximum, maximum, maximum, maximum, maximum, maximum, minimum];\n\njulia> result = mairca(df, weights, fns);\n\njulia> result.scores\n4-element Array{Float64,1}:\n 0.12064543054088471\n 0.08066456363291889\n 0.14586265389012484\n 0.14542366685864686\n\njulia> result.bestIndex\n2\n\nReferences\n\nPamučar, D., Lukovac, V., Božanić, D., & Komazec, N. (2018). Multi-criteria FUCOM-MAIRCA model for the evaluation of level crossings: case study in the Republic of Serbia. Operational Research in Engineering Sciences: Theory and Applications, 1(1), 108-129.\n\nUlutaş A.(2019),Swara Ve Mairca Yöntemleri İle Catering Firması Seçimi,BMIJ, (2019), 7(4): 1467-1479 http://dx.doi.org/10.15295/bmij.v7i4.1166\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#COPRAS","page":"Multiple Criteria Decision Making Tools","title":"COPRAS","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.copras","category":"page"},{"location":"mcdms/#JMcDM.copras","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.copras","text":"copras(decisionMat, weights, fs)\n\nApply COPRAS (COmplex PRoportional ASsesment) method for a given matrix, weights and, type of criteria.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n alternatives and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfs::Array{Function,1}: m-vector of type of criteria. The benefit criteria shown with \"maximum\", and the cost criteria shown with \"minimum\".\n\nDescription\n\ncopras() applies the COPRAS method to rank n alternatives subject to m criteria and criteria type vector.\n\nOutput\n\n::COPRASResult: COPRASResult object that holds multiple outputs including scores and best index.\n\nExamples\n\njulia> decmat = [2.50 240 57 45 1.10 0.333333;\n       2.50 285 60 75 4.00 0.428571;\n       4.50 320 100 65 7.50 1.111111;\n       4.50 365 100 90 7.50 1.111111;\n       5.00 400 100 90 11.00 1.111111;\n       2.50 225 60 45 1.10 0.333333;\n       2.50 270 57 60 4.00 0.428571;\n       4.50 330 100 70 7.50 1.111111;\n       4.50 365 100 80 7.50 1.111111;\n       5.00 380 110 65 8.00 1.111111;\n       2.50 285 65 80 4.00 0.400000;\n       4.00 280 75 65 4.00 0.400000;\n       4.50 365 102 95 7.50 1.111111;\n       4.50 400 102 95 7.50 1.111111;\n       6.00 450 110 95 11.00 1.176471;\n       6.00 510 110 105 11.00 1.176471;\n       6.00 330 140 110 18.50 1.395349;\n       2.50 240 65 80 4.00 0.400000;\n       4.00 280 75 75 4.00 0.400000;\n       4.50 355 102 95 7.50 1.111111;\n       4.50 385 102 90 7.50 1.111111;\n       5.00 385 114 95 7.50 1.000000;\n       6.00 400 110 90 11.00 1.000000;\n       6.00 480 110 95 15.00 1.000000;\n       6.00 440 140 100 18.50 1.200000;\n       6.00 500 140 100 18.50 1.200000;\n       5.00 450 125 100 15.00 1.714286;\n       6.00 500 150 125 18.50 1.714286;\n       6.00 515 180 140 22.00 2.307692;\n       7.00 550 200 150 30.00 2.307692;\n       6.00 500 180 140 15.00 2.307692;\n       6.00 500 180 140 18.50 2.307692;\n       6.00 500 180 140 22.00 2.307692;\n       7.00 500 180 140 30.00 2.307692;\n       7.00 500 200 140 37.00 2.307692;\n       7.00 500 200 140 45.00 2.307692;\n       7.00 500 200 140 55.00 2.307692;\n       7.00 500 200 140 75.00 2.307692]\n38×6 Array{Float64,2}:\n 2.5  240.0   57.0   45.0   1.1  0.333333\n 2.5  285.0   60.0   75.0   4.0  0.428571\n 4.5  320.0  100.0   65.0   7.5  1.11111\n 4.5  365.0  100.0   90.0   7.5  1.11111\n 5.0  400.0  100.0   90.0  11.0  1.11111\n 2.5  225.0   60.0   45.0   1.1  0.333333\n 2.5  270.0   57.0   60.0   4.0  0.428571\n 4.5  330.0  100.0   70.0   7.5  1.11111\n 4.5  365.0  100.0   80.0   7.5  1.11111\n 5.0  380.0  110.0   65.0   8.0  1.11111\n 2.5  285.0   65.0   80.0   4.0  0.4\n ⋮                               ⋮\n 6.0  500.0  150.0  125.0  18.5  1.71429\n 6.0  515.0  180.0  140.0  22.0  2.30769\n 7.0  550.0  200.0  150.0  30.0  2.30769\n 6.0  500.0  180.0  140.0  15.0  2.30769\n 6.0  500.0  180.0  140.0  18.5  2.30769\n 6.0  500.0  180.0  140.0  22.0  2.30769\n 7.0  500.0  180.0  140.0  30.0  2.30769\n 7.0  500.0  200.0  140.0  37.0  2.30769\n 7.0  500.0  200.0  140.0  45.0  2.30769\n 7.0  500.0  200.0  140.0  55.0  2.30769\n 7.0  500.0  200.0  140.0  75.0  2.30769\n\njulia> df = makeDecisionMatrix(decmat)\n38×6 DataFrame\n Row │ Crt1     Crt2     Crt3     Crt4     Crt5     Crt6     \n     │ Float64  Float64  Float64  Float64  Float64  Float64  \n─────┼───────────────────────────────────────────────────────\n   1 │     2.5    240.0     57.0     45.0      1.1  0.333333\n   2 │     2.5    285.0     60.0     75.0      4.0  0.428571\n   3 │     4.5    320.0    100.0     65.0      7.5  1.11111\n   4 │     4.5    365.0    100.0     90.0      7.5  1.11111\n   5 │     5.0    400.0    100.0     90.0     11.0  1.11111\n   6 │     2.5    225.0     60.0     45.0      1.1  0.333333\n   7 │     2.5    270.0     57.0     60.0      4.0  0.428571\n   8 │     4.5    330.0    100.0     70.0      7.5  1.11111\n   9 │     4.5    365.0    100.0     80.0      7.5  1.11111\n  ⋮  │    ⋮        ⋮        ⋮        ⋮        ⋮        ⋮\n  30 │     7.0    550.0    200.0    150.0     30.0  2.30769\n  31 │     6.0    500.0    180.0    140.0     15.0  2.30769\n  32 │     6.0    500.0    180.0    140.0     18.5  2.30769\n  33 │     6.0    500.0    180.0    140.0     22.0  2.30769\n  34 │     7.0    500.0    180.0    140.0     30.0  2.30769\n  35 │     7.0    500.0    200.0    140.0     37.0  2.30769\n  36 │     7.0    500.0    200.0    140.0     45.0  2.30769\n  37 │     7.0    500.0    200.0    140.0     55.0  2.30769\n  38 │     7.0    500.0    200.0    140.0     75.0  2.30769\n                                              20 rows omitted\n\njulia> weights = [0.1667, 0.1667, 0.1667, 0.1667, 0.1667, 0.1667];\n\njulia> fns = [maximum, maximum, maximum, maximum, maximum, minimum];\n\njulia> result = copras(df, w, fs);\n\njulia> result.bestIndex\n38\n\njulia> result.scores\n38-element Array{Float64,1}:\n 0.021727395411605937\n 0.019814414550092637\n 0.01789214190869233\n 0.01624057709923278\n 0.01507318798582843\n 0.021837811311495522\n 0.020735423365838293\n 0.01754833367014725\n 0.016658288043259514\n 0.016258710042371068\n 0.019388734250223458\n ⋮\n 0.01064826476628102\n 0.01000964101170639\n 0.007056714858865703\n 0.010627520153194962\n 0.010419795157349462\n 0.010212070161503961\n 0.00876261130160425\n 0.007733739643860005\n 0.007258939653356005\n 0.006665439665226005\n 0.005478439688966004\n\nReferences\n\nKaklauskas, A., Zavadskas, E. K., Raslanas, S., Ginevicius, R., Komka, A., & Malinauskas, P. (2006). Selection of low-e windows in retrofit of public buildings by applying multiple criteria method COPRAS: A Lithuanian case. Energy and buildings, 38(5), 454-462. Özdağoğlu, A. (2013). İmalat işletmeleri için eksantrik pres alternatiflerinin COPRAS yöntemi ile karşılaştırılması. Gümüşhane Üniversitesi Sosyal Bilimler Enstitüsü Elektronik Dergisi, 4(8), 1-22. Yıldırım, B. F., Timor, M. (2019). \"Bulanık ve Gri COPRAS Yöntemleri Kullanılarak Tedarikçi Seçim Modeli Geliştirilmesi\". Optimum Ekonomi ve Yönetim Bilimleri Dergisi, 6 (2), 283-310.\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#PROMETHEE","page":"Multiple Criteria Decision Making Tools","title":"PROMETHEE","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.promethee","category":"page"},{"location":"mcdms/#JMcDM.promethee","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.promethee","text":"    promethee(decisionMatrix, prefs, weights, fns, qs, ps)\n\nApply PROMETHEE (Preference Ranking Organization METHod for Enrichment of Evaluations) method for a given matrix and weights.\n\nArguments:\n\ndecisionMatrix::DataFrame: n × m matrix of objective values for n candidate (or strategy) and m criteria \npref::Array{Function, 1}: m-vector of preference functions that are prometLinear, prometVShape, prometUShape, prometQuasi, or prometLevel.\nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of functions that are either maximum or minimum.\nqs::Array{Float64, 1}: m-vector of q parameters that is used in corresponding preference function.\nps::Array{Float64, 1}: m-vector of p parameters that is used in corresponding preference function\n\nDescription\n\npromethee() applies the PROMETHEE method to rank n strategies subject to m criteria which are supposed to be either maximized or minimized.\n\nOutput\n\n::Result: PrometheeResult object that holds multiple outputs including scores and best index.\n\nExamples\n\njulia> decmat = [42.0 35 43 51; \n                     89 72 92 85;\n                     14 85 17 40;\n                     57 60 45 80;\n                     48 32 43 40;\n                     71 45 60 85;\n                     69 40 72 55;\n                     64 35 70 60];\n\njulia> df = makeDecisionMatrix(decmat)\n8×4 DataFrame\n Row │ Crt1     Crt2     Crt3     Crt4    \n     │ Float64  Float64  Float64  Float64 \n─────┼────────────────────────────────────\n   1 │    42.0     35.0     43.0     51.0\n   2 │    89.0     72.0     92.0     85.0\n   3 │    14.0     85.0     17.0     40.0\n   4 │    57.0     60.0     45.0     80.0\n   5 │    48.0     32.0     43.0     40.0\n   6 │    71.0     45.0     60.0     85.0\n   7 │    69.0     40.0     72.0     55.0\n   8 │    64.0     35.0     70.0     60.0\n\njulia> qs = [49, nothing, 45, 30];\n\njulia> ps = [100, 98, 95, 80];\n\njulia> weights = [0.25, 0.35, 0.22, 0.18];\n\njulia> fns = makeminmax([maximum, maximum, maximum, maximum]);\n\njulia> prefs = convert(Array{Function,1}, [prometLinear, prometVShape, prometLinear, prometLinear]);\n\njulia> result = promethee(df, prefs, weights, fns, qs, ps);\n\njulia> result.scores\n8-element Array{Float64,1}:\n  0.0698938775510204\n -0.148590956382553\n -0.061361984793917565\n -0.04780408163265306\n  0.09859591836734694\n -0.0006389755902360891\n  0.03236974789915966\n  0.057536454581832736\n\njulia> result.bestIndex\n5\n\nReferences\n\nİşletmeciler, Mühendisler ve Yöneticiler için Operasyonel, Yönetsel ve Stratejik Problemlerin Çözümünde Çok Kriterli Karar verme Yöntemleri, Editörler: Bahadır Fatih Yıldırım ve Emrah Önder, Dora, 2. Basım, 2015, ISBN: 978-605-9929-44-8\n\n\n\n\n\n","category":"function"},{"location":"mcdms/#CoCoSo","page":"Multiple Criteria Decision Making Tools","title":"CoCoSo","text":"","category":"section"},{"location":"mcdms/","page":"Multiple Criteria Decision Making Tools","title":"Multiple Criteria Decision Making Tools","text":"JMcDM.cocoso","category":"page"},{"location":"mcdms/#JMcDM.cocoso","page":"Multiple Criteria Decision Making Tools","title":"JMcDM.cocoso","text":"    cocoso(decisionMat, weights, fns, lambda)\n\nApply CoCoSo (Combined Compromise Solution) method for a given matrix and weights.\n\nArguments:\n\ndecisionMat::DataFrame: n × m matrix of objective values for n alternatives and m criteria \nweights::Array{Float64, 1}: m-vector of weights that sum up to 1.0. If the sum of weights is not 1.0, it is automatically normalized.\nfns::Array{Function, 1}: m-vector of functions to be applied on the columns.\nlambda::Float64: joint criterion. 0<=lambda<=1, default=0.5.\n\nDescription\n\ncocoso() applies the CoCoSo method to rank n alterntives subject to m criteria which are supposed to be  either maximized or minimized.\n\nOutput\n\n::CoCoSoResult: CoCoSoResult object that holds multiple outputs including scores, rankings, and best index.\n\nExamples\n\njulia> decmat = [3        12.5        2        120        14        3;\n       5        15        3        110        38        4;\n       3        13        2        120        19        3;\n       4        14        2        100        31        4;\n       3        15        1.5        125        40        4]\n5×6 Array{Float64,2}:\n 3.0  12.5  2.0  120.0  14.0  3.0\n 5.0  15.0  3.0  110.0  38.0  4.0\n 3.0  13.0  2.0  120.0  19.0  3.0\n 4.0  14.0  2.0  100.0  31.0  4.0\n 3.0  15.0  1.5  125.0  40.0  4.0\n\njulia> df = makeDecisionMatrix(decmat)\n5×6 DataFrame\n Row │ Crt1     Crt2     Crt3     Crt4     Crt5     Crt6    \n     │ Float64  Float64  Float64  Float64  Float64  Float64 \n─────┼──────────────────────────────────────────────────────\n   1 │     3.0     12.5      2.0    120.0     14.0      3.0\n   2 │     5.0     15.0      3.0    110.0     38.0      4.0\n   3 │     3.0     13.0      2.0    120.0     19.0      3.0\n   4 │     4.0     14.0      2.0    100.0     31.0      4.0\n   5 │     3.0     15.0      1.5    125.0     40.0      4.0\n\njulia> weights = [0.221, 0.159, 0.175, 0.127, 0.117, 0.201];\n\njulia> fns = [maximum, minimum, minimum, maximum, minimum, maximum];\n\njulia> lambda = 0.5;\n\njulia> result = cocoso(df, weights, fns, lambda);\n\njulia> result.scores\n7-element Array{Float64,1}:\n 2.0413128390265998\n 2.787989783418825\n 2.8823497955972495\n 2.4160457689259287\n 1.2986918936013303\n 1.4431429073391682\n 2.519094173200623\n\njulia> result.bestIndex\n3\n\nReferences\n\nYazdani, M., Zarate, P., Kazimieras Zavadskas, E. and Turskis, Z. (2019), \"A combined compromise solution (CoCoSo) method for multi-criteria decision-making problems\", Management Decision, Vol. 57 No. 9, pp. 2501-2519. https://doi.org/10.1108/MD-05-2017-0458\n\n\n\n\n\n","category":"function"},{"location":"#Contents","page":"Contents","title":"Contents","text":"","category":"section"},{"location":"","page":"Contents","title":"Contents","text":"Pages = [\"index.md\", \"mcdms.md\"]\nDepth = 3","category":"page"}]
}
